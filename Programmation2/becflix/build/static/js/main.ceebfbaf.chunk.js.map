{"version":3,"sources":["img/img/becflix.png","img/witcher.jpg","img/img/Suspense/unite9.jpg","img/img/Suspense/district31.jpg","img/img/Suspense/fugueuse.jpg","img/img/Suspense/lesinvincibles.jpg","img/img/Suspense/serienoire.jpg","components/TVshow/TVshow.js","components/Categorie/Categorie.js","components/Catalogue/Catalogue.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TVshow","Col","lg","src","this","props","alt","title","className","React","Component","tabSuspense","require","Categorie","Row","categorie","AfficherCategorie","map","element","i","keys","defaultProps","Cataloge","Container","fluid","flixlogotype","flix","height","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,2FCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,8JCM9BC,EAAb,uKAEQ,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACH,yBACbC,IAAMC,KAAKC,MAAMF,IACjBG,IAAMF,KAAKC,MAAMC,IACjBC,MAAOH,KAAKC,MAAME,MAClBC,UAAU,mBARd,GAA4BC,IAAMC,WCF5BC,EAAc,CAChB,CACIR,IAAKS,EAAQ,IACbN,IAAI,cACJC,MAAM,eACV,CACAJ,IAAKS,EAAQ,IACTN,IAAI,UACJC,MAAM,WACV,CACAJ,IAAKS,EAAQ,IACTN,IAAI,cACJC,MAAM,eACV,CACAJ,IAAIS,EAAQ,IACRN,IAAI,WACJC,MAAM,YACV,CACAJ,IAAIS,EAAQ,IACRN,IAAI,kBACJC,MAAM,mBACV,CACAJ,IAAIS,EAAQ,IACRN,IAAI,cACJC,MAAM,gBAGDM,EAAb,uKAEQ,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,4BAAKV,KAAKC,MAAMU,WAChB,2BAAIX,KAAKC,MAAME,QAEnB,kBAACO,EAAA,EAAD,KACKV,KAAKY,wBAT1B,0CAgBQ,GAA6B,aAAzBZ,KAAKC,MAAMU,UACX,OACIJ,EAAYM,KAAI,SAACC,EAAQC,GAAT,OAAe,kBAAC,EAAD,CAE/BC,KAAM,WAAaD,EACfhB,IAAKe,EAAQf,IACbG,IAAKY,EAAQZ,IACbC,MAAOW,EAAQX,eAvBnC,GAA+BE,IAAMC,WA8B7BG,EAAUQ,aAAe,CACrBN,UAAY,YCzDjB,IAAMO,EAAb,uKAEQ,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAEZ,kBAAC,EAAD,CAAWT,UAAY,aACvB,kBAAC,EAAD,CAAWA,UAAY,UACvB,kBAAC,EAAD,CAAWA,UAAY,uBACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,WAThB,GAA8BN,IAAMC,WCI9Be,EAAe,yBACjBtB,IAAKuB,IACLpB,IAAI,WACJqB,OANS,QAOTC,MAPS,UAmBEC,MATf,WACE,OACE,kBAACN,EAAA,EAAD,CAAWC,OAAK,GACbC,EACD,kBAAC,EAAD,QCRcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ceebfbaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/becflix.46a32f48.png\";","module.exports = __webpack_public_path__ + \"static/media/witcher.6fd707d6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/unite9.f2ca7766.jpg\";","module.exports = __webpack_public_path__ + \"static/media/district31.8e4c6ea1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fugueuse.91d87a25.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lesinvincibles.6f54be64.jpg\";","module.exports = __webpack_public_path__ + \"static/media/serienoire.07756307.jpg\";","import React from 'react'; \r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\n\r\nexport class TVshow extends React.Component{\r\n    render() {\r\n        return (\r\n            <Col lg='2'>\r\n                 <img \r\n    src= {this.props.src}\r\n    alt= {this.props.alt}\r\n    title={this.props.title}\r\n    className=\"img-fluid\" />\r\n            </Col>\r\n        );\r\n    }\r\n};","import React from 'react'; \r\nimport Row from 'react-bootstrap/Row';\r\nimport {TVshow} from '../TVshow/TVshow';\r\n\r\nconst tabSuspense = [\r\n    {\r\n        src: require('../../img/witcher.jpg'), \r\n        alt:\"The Witcher\" ,\r\n        title:\"The Witcher\"},\r\n    {\r\n    src: require('../../img/img/Suspense/unite9.jpg'), \r\n        alt:\"Unite 9\" ,\r\n        title:\"Unite 9\"},\r\n    { \r\n    src: require('../../img/img/Suspense/district31.jpg'), \r\n        alt:\"District 31\", \r\n        title:\"District 31\" },\r\n    {\r\n    src:require('../../img/img/Suspense/fugueuse.jpg'), \r\n        alt:\"Fugueuse\", \r\n        title:\"Fugueuse\"},\r\n    {\r\n    src:require('../../img/img/Suspense/lesinvincibles.jpg'), \r\n        alt:\"Les invincibles\", \r\n        title:\"Les Invincibles\" },\r\n    { \r\n    src:require('../../img/img/Suspense/serienoire.jpg'), \r\n        alt:\"Serie noire\", \r\n        title:\"Serie noire\" }\r\n];\r\n\r\nexport class Categorie extends React.Component{\r\n    render() {\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <h1>{this.props.categorie}</h1>\r\n                    <p>{this.props.title}</p>\r\n                </Row>\r\n                <Row>\r\n                    {this.AfficherCategorie()}\r\n                </Row>\r\n            </>\r\n        );\r\n        }\r\n\r\n    AfficherCategorie(){\r\n        if (this.props.categorie === 'Suspense'){\r\n            return(\r\n                tabSuspense.map((element,i) => <TVshow  \r\n    \r\n                keys={\"suspense\" + i} \r\n                    src={element.src} \r\n                    alt={element.alt} \r\n                    title={element.title}></TVshow>) \r\n                )\r\n            }\r\n    \r\n         }\r\n        };\r\n         \r\n        Categorie.defaultProps = {\r\n            categorie : 'Suspense'};","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {Categorie} from '../Categorie/Categorie';\r\n\r\n\r\nexport class Cataloge extends React.Component{\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n              \r\n                <Categorie categorie = \"Suspense\"/>\r\n                <Categorie categorie = \"Humor\"/>\r\n                <Categorie categorie = \"Series Americaines\"/>\r\n                <Categorie/>\r\n                <Categorie/>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\n","import React from \"react\";  \nimport flix from '../../img/img/becflix.png';\nimport \"./App.css\";\nimport Container from 'react-bootstrap/Container';\nimport {Cataloge} from '../Catalogue/Catalogue';\n\nconst larg = \"100px\"; \n\n\nconst flixlogotype = <img \n    src={flix}\n    alt=\"logotype\"\n    height={larg}\n    width={larg}/>\n    \n\nfunction App() {\n  return (\n    <Container fluid>\n      {flixlogotype}\n      <Cataloge/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";  \nimport ReactDOM from \"react-dom\";  \nimport \"./index.css\";  \nimport App from \"../src/components/App/App\";  \nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";  \n\n \n\nReactDOM.render(  \n\n  <React.StrictMode>  \n\n    <App />  \n\n  </React.StrictMode>,  \n\n  document.getElementById(\"root\")  \n\n);  \n\n \n\n \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}