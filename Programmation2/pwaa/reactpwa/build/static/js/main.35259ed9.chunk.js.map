{"version":3,"sources":["img/sp.png","components/BoutoninstallPWA.js","components/DemoJSONLocal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoutonInstallPWA","Button","variant","size","block","id","DemoJSONLocal","json","require","readSpider","spider","console","log","spiders","forEach","push","i","length","name","test","App","className","src","logo","alt","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,gC,2jCCY5BC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,OAAK,EAACC,GAAG,iBAA7C,uBC0DWC,MA9Df,WAEE,OAKF,WACE,IAAIC,EAAOC,EAAQ,IAKjB,SAASC,EAAWC,GAClBC,QAAQC,IAAIF,GAJdC,QAAQC,IAAI,YACZL,EAAKM,QAAQC,QAAQL,GAOrBF,EAAKM,QAAQE,KACX,CACA,GAAM,EACN,KAAQ,aACR,QAAW,geACX,UAAa,CACX,CACE,KAAQ,SAEV,CACE,KAAQ,eAKdJ,QAAQC,IAAI,UACZL,EAAKM,QAAQC,QAAQL,GAGrB,IAAK,IAAIO,EAAI,EAAGA,EAAIT,EAAKM,QAAQI,OAAQD,IACvC,GAA2B,IAAvBT,EAAKM,QAAQG,GAAGX,GAAU,CAC5BE,EAAKM,QAAQG,GAAGE,KAAO,eACvB,MAGJP,QAAQC,IAAI,UACZL,EAAKM,QAAQC,QAAQL,GAGrB,IAASO,EAAI,EAAGA,EAAIT,EAAKM,QAAQI,QACJ,IAAvBV,EAAKM,QAAQG,GAAGX,GADmBW,KAMzCL,QAAQC,IAAI,UACZL,EAAKM,QAAQC,QAAQL,GArDrBU,GAEA,wD,MCgBWC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAM,SAASC,OAAO,WACtE,yCAIF,kBAAC,EAAD,QCJAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BnC,QAAQC,IACN,iHAKEuB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB7B,QAAQC,IAAI,sCAGRuB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLvC,QAAQuC,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,IAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,IAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLtC,QAAQC,IACN,oEAvFA2D,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjC5B,QAAQC,IACN,iHAMJqB,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.35259ed9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sp.2a804c6b.png\";","import React, { useState, useEffect } from \"react\";\r\nimport Button from 'react-bootstrap/Button';  \r\n\r\n\r\nfunction BoutonInstallPWA() {\r\n  return (\r\n    <Button variant=\"success\" size=\"lg\" block id=\"boutonInstall\">\r\n      Install Spider App\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default BoutonInstallPWA;","import React from \"react\";\r\n\r\nfunction DemoJSONLocal() {\r\n    test();\r\n  return (\r\n    <h1>Spider Verse Characters</h1>\r\n  );\r\n}\r\n\r\nfunction test(){ \r\n  let json = require('../localDB/db.json');\r\n\r\n    console.log(\"AFFICHER\"); \r\n    json.spiders.forEach(readSpider);\r\n\r\n    function readSpider(spider) {\r\n      console.log(spider);\r\n    }\r\n\r\n \r\n    json.spiders.push(\r\n      {\r\n      \"id\": 3,\r\n      \"name\": \"Spider-Ham\",\r\n      \"picture\": \"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/ea196117-0b64-49b7-b13f-79f43cf77e53/dcv8a9s-4d5a62d5-fc5a-4152-b7d6-23b6105a092e.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvZWExOTYxMTctMGI2NC00OWI3LWIxM2YtNzlmNDNjZjc3ZTUzXC9kY3Y4YTlzLTRkNWE2MmQ1LWZjNWEtNDE1Mi1iN2Q2LTIzYjYxMDVhMDkyZS5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.j8L1snd0UcRyVL58VGiN3NqtIegZdx0Oh8QtY7gTFEs\",\r\n      \"abilities\": [\r\n        {\r\n          \"name\": \"NoHam\"\r\n        },\r\n        {\r\n          \"name\": \"webcross\"\r\n        }\r\n      ]\r\n    });\r\n    \r\n    console.log(\"ADDING\"); \r\n    json.spiders.forEach(readSpider);\r\n\r\n\r\n    for (var i = 0; i < json.spiders.length; i++) {\r\n      if (json.spiders[i].id === 3) {\r\n        json.spiders[i].name = \"Mister Piggy\";\r\n        break;\r\n      }\r\n    }\r\n    console.log(\"MODIFY\"); \r\n    json.spiders.forEach(readSpider);\r\n\r\n\r\n    for (var i = 0; i < json.spiders.length; i++) {\r\n      if (json.spiders[i].id === 3) {\r\n        //json.spiders.splice(i);\r\n        break;\r\n      }\r\n    }\r\n    console.log(\"Delete\"); \r\n    json.spiders.forEach(readSpider);\r\n\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\nexport default DemoJSONLocal;","import React from 'react';\nimport logo from './img/sp.png';\nimport BoutonInstallPWA from './components/BoutoninstallPWA';\nimport DemoJSONLocal from './components/DemoJSONLocal';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoutonInstallPWA/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"400 px\" height=\"100 px\"/>\n        <h1>\n          Swiiiing\n        </h1>\n      </header>\n      <DemoJSONLocal/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}