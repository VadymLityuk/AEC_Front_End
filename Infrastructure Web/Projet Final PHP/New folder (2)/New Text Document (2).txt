<section className="portfolio">
      
      
  <div class="container-fluid pageContent">
   <h2  className="text-center">what's hot</h2>

  </div>
   <div  class="poster row pt-5">
   <section  class="col-sm-7 offset-2 col-lg-7  posts">
       <article  class="post witch mb-3">
           <div class="insidePost mx-3">
               <div class="  featureImg">
               <iframe className=" postContent video" width="100%" height="220" src="https://www.youtube.com/embed/1gPGeAYo3yU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
               </div>
          
           </div>
          
       </article>
       <article class="  post mb-3">
                <div class="insidePost mx-3">
                    <div class=" featureImg">
                    <iframe className="  postContent video" width="100%" height="240" src="https://www.youtube.com/embed/NLOp_6uPccQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </div>
                
                </div>
            </article>
            <article   class="post mb-3">
                <div class="insidePost mx-3">
                    <div class=" witch featureImg">
                    <Image className=" postContent" fluid src={picha.witcher}  />
                    </div>
                   
                </div>
            </article>
            <article  class="post mb-3">
                <div class="insidePost mx-3">
                    <div class=" featureImg">
                    <Image className=" postContent" fluid src={picha.boys}  />
                    </div>
                   
                </div>
            </article>
</section>
</div>
       </section>




  const calc = (x, y) => [-(y - window.innerHeight / 2) / 10, (x - window.innerWidth / 2) / 15, 1.1]
    const trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`
    const [props, set] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 5, tension: 350, friction: 40 } }))
       <animated.div
      class="card"
      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}
      onMouseLeave={() => set({ xys: [0, 0, 1] })}
      style={{ transform: props.xys.interpolate(trans) }}
    />
      